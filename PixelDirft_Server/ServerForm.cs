using Supabase;
using Supabase.Postgrest;
using Supabase.Postgrest.Models;
using Supabase.Postgrest.Attributes;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.ListView;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.StartPanel;

namespace PixelDirft_Server
{
    public partial class ServerForm : Form
    {
        // ƒê·ªëi t∆∞·ª£ng d√πng ƒë·ªÉ l·∫Øng nghe (listen) k·∫øt n·ªëi TCP t·ª´ c√°c client
        private TcpListener Listener;
        // Lu·ªìng (thread) ri√™ng ƒë·ªÉ ch·∫°y server ‚Äî gi√∫p giao di·ªán kh√¥ng b·ªã ƒë∆° khi server ƒëang ch·∫°y
        private Thread ListenThread;
        // Bi·∫øn c·ªù (flag) d√πng ƒë·ªÉ ki·ªÉm tra server ƒëang b·∫≠t hay t·∫Øt
        private bool IsRunning = false;
        // Danh s√°ch c√°c client ƒë√£ k·∫øt n·ªëi ƒë·∫øn server
        private List<TcpClient> Clients = new List<TcpClient>();

        private void Log(string message)
        {
            // N·∫øu h√†m n√†y ƒë∆∞·ª£c g·ªçi t·ª´ lu·ªìng kh√°c v·ªõi lu·ªìng giao di·ªán (UI)
            if (tb_hienthi.InvokeRequired)
            {
                // D√πng Invoke ƒë·ªÉ an to√†n c·∫≠p nh·∫≠t textbox t·ª´ lu·ªìng kh√°c
                tb_hienthi.Invoke(new Action(() => tb_hienthi.AppendText(message + Environment.NewLine)));
            }
            else
            {
                // N·∫øu ƒëang ·ªü lu·ªìng giao di·ªán th√¨ ghi tr·ª±c ti·∫øp
                tb_hienthi.AppendText(message + Environment.NewLine);
            }
        }

        private void StartServer()
        {
            try
            {
                // 1. Kh·ªüi t·∫°o TcpListener ‚Äî l·∫Øng nghe t·∫•t c·∫£ IP (IPAddress.Any) t·∫°i c·ªïng 1111
                Listener = new TcpListener(IPAddress.Any, 1111);
                // 2. B·∫Øt ƒë·∫ßu l·∫Øng nghe k·∫øt n·ªëi ƒë·∫øn
                Listener.Start();
                Log("Listening on port 1111...");
                // 3. V√≤ng l·∫∑p ch√≠nh ‚Äî server s·∫Ω ch·∫°y m√£i cho ƒë·∫øn khi IsRunning = false
                while (IsRunning)
                {
                    try
                    {
                        // Ki·ªÉm tra xem c√≥ client n√†o ƒëang y√™u c·∫ßu k·∫øt n·ªëi hay kh√¥ng
                        if (Listener.Pending())
                        {
                            // N·∫øu c√≥ client ƒëang k·∫øt n·ªëi th√¨ ch·∫•p nh·∫≠n k·∫øt n·ªëi
                            TcpClient Client = Listener.AcceptTcpClient();
                            Log("Client connected: " + Client.Client.RemoteEndPoint.ToString());
                            // L∆∞u client v√†o danh s√°ch qu·∫£n l√Ω
                            Clients.Add(Client);
                            // T·∫°o thread ri√™ng cho client n√†y
                            Thread t = new Thread(() => HandleClient(Client));
                            lock (t)
                            {
                                ClientThreads.Add(t);
                            }
                            t.Start();

                        }
                        else
                        {
                            // N·∫øu ch∆∞a c√≥ client k·∫øt n·ªëi, t·∫°m d·ª´ng 100ms ƒë·ªÉ kh√¥ng t·ªën CPU
                            Thread.Sleep(100);
                        }
                    }
                    catch (SocketException)
                    {
                        break;
                    }
                    catch (Exception ex)
                    {
                        Log("Error: " + ex.Message);
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                Log("L·ªói: " + ex.Message);
            }
        }



        private List<Thread> ClientThreads = new List<Thread>();
        private void HandleClient(TcpClient client)
        {
            try
            {
                NetworkStream ns = client.GetStream();
                byte[] buffer = new byte[4096];
                int bytesRead;

                while ((bytesRead = ns.Read(buffer, 0, buffer.Length)) > 0)
                {
                    string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Log($"[{client.Client.RemoteEndPoint}] g·ª≠i: {message}");

                    try
                    {
                        var data = JsonSerializer.Deserialize<Dictionary<string, string>>(message);
                        string action = data.ContainsKey("action") ? data["action"] : "";

                        string response;

                        switch (action)
                        {
                            case "login":
                                response = HandleLogin(data);
                                break;

                            case "register":
                                response = HandleRegister(data);
                                break;

                            case "get_info": // üëà Th√™m d√≤ng n√†y
                                response = HandleGetInfo(data);
                                break;

                            default:
                                response = JsonSerializer.Serialize(new { status = "error", message = "Unknown action" });
                                break;
                        }

                        byte[] respBytes = Encoding.UTF8.GetBytes(response);
                        ns.Write(respBytes, 0, respBytes.Length);
                    }
                    catch (JsonException)
                    {
                        Log("‚ùå D·ªØ li·ªáu t·ª´ client kh√¥ng ph·∫£i JSON h·ª£p l·ªá!");
                    }
                }
            }
            catch { }
            finally
            {
                Log($"Client {client.Client.RemoteEndPoint} ƒë√£ ng·∫Øt k·∫øt n·ªëi.");
            }
        }



        private string HandleGetInfo(Dictionary<string, string> data)
        {
            if (!data.ContainsKey("username"))
            {
                return JsonSerializer.Serialize(new { status = "error", message = "Thi·∫øu tham s·ªë username!" });
            }

            string username = data["username"];

            try
            {
                var client = SupabaseHelper.Client;
                var result = client.From<TaiKhoanNguoiDung>().Where(u => u.Username == username).Get().Result;

                if (result.Models.Count > 0)
                {
                    var user = result.Models[0];

                    return JsonSerializer.Serialize(new
                    {
                        status = "success",
                        data = new
                        {
                            Username = user.Username,
                            Email = user.Email,
                            Birthday = user.Birthday.ToString("yyyy-MM-dd")
                        }
                    });
                }
                else
                {
                    return JsonSerializer.Serialize(new { status = "error", message = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
                }
            }
            catch (Exception ex)
            {
                return JsonSerializer.Serialize(new { status = "error", message = "L·ªói Supabase: " + ex.Message });
            }
        }


        public ServerForm()
        {
            InitializeComponent();
        }

        private void btn_Start_Server_Click(object sender, EventArgs e)
        {
            if (!IsRunning)
            {
                // B·∫≠t c·ªù l√™n ƒë·ªÉ server b·∫Øt ƒë·∫ßu ch·∫°y
                IsRunning = true;
                // T·∫°o lu·ªìng ri√™ng ƒë·ªÉ ch·∫°y StartServer (n·∫øu kh√¥ng, form s·∫Ω b·ªã ƒë·ª©ng)
                ListenThread = new Thread(StartServer);
                // B·∫Øt ƒë·∫ßu lu·ªìng
                ListenThread.Start();
            }
            else
            {
                Log("Server is already running.");
            }
        }

        private void StopServer()
        {
            try
            {
                // ƒê·∫∑t c·ªù d·ª´ng l·∫°i ‚Üí v√≤ng while trong StartServer s·∫Ω tho√°t
                IsRunning = false;
                if (Listener != null)
                {
                    // D·ª´ng l·∫Øng nghe v√† ƒë√≥ng port
                    Listener.Stop();
                    Listener = null;
                }

                if (ListenThread != null && ListenThread.IsAlive)
                {
                    // Ch·ªù t·ªëi ƒëa 0.5 gi√¢y cho thread d·ª´ng h·∫≥n
                    ListenThread.Join(500);
                    ListenThread = null;
                }
                Log("Server stopped.");
            }
            catch (Exception ex)
            {
                Log("Error stopping server: " + ex.Message);
            }
        }

        private void btn_End_Server_Click(object sender, EventArgs e)
        {
            if (IsRunning)
            {
                StopServer();
            }
            else
            {
                Log("Server is not running.");
            }
        }

        private void btn_Send_All_Click(object sender, EventArgs e)
        {
            // L·∫•y n·ªôi dung
            string Message = tb_nhaptinnhan.Text;
            // Kh√¥ng c√≥ g√¨ th√¨ b√°o l·ªói
            if (string.IsNullOrEmpty(Message))
            {
                MessageBox.Show("Kh√¥ng c√≥ n·ªôi dung g√¨ ƒë·ªÉ g·ª≠i");
                return;
            }

            // Chuy·ªÉn n·ªôi dung qua nh·ªã ph√¢n
            byte[] Data = Encoding.UTF8.GetBytes(Message);

            foreach (var Client in Clients)
            {
                try
                {
                    // G·ª≠i qua stream cho t·ª´ng Client
                    NetworkStream ns = Client.GetStream();
                    ns.Write(Data, 0, Data.Length);
                }
                catch
                {
                }
            }
            Log("ƒê√£ g·ª≠i broadcast: " + Message);
        }

        private async void ServerForm_Load(object sender, EventArgs e)
        {
            try
            {
                await SupabaseHelper.Initialize();
                Log("Supabase ƒë√£ s·∫µn s√†ng!");
            }
            catch (Exception ex)
            {
                Log("L·ªói Supabase: " + ex.Message);
            }
        }


        //X·ª≠ l√≠ nh·∫≠n t√≠n hi·ªáu t·ª´ form ƒëƒÉng k√≠
        private string HandleRegister(Dictionary<string, string> data)
        {
            string username = data["username"];
            string email = data["email"];
            string password = data["password"];

            try
            {
                //K·∫øt n·ªëi v·ªõi database v√† ki·ªÉm tra username ƒë√£ c√≥ ch∆∞a
                var client = SupabaseHelper.Client;
                var existing = client.From<TaiKhoanNguoiDung>().Where(u => u.Username == username).Get().Result; 

                if (existing.Models.Count > 0)
                {
                    return JsonSerializer.Serialize(new
                    {
                        status = "error",
                        message = "T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i!"
                    });
                }

                var newUser = new TaiKhoanNguoiDung
                {
                    Username = username,
                    Email = email,
                    Password = password,
                    Birthday = DateTime.Now
                };

                client.From<TaiKhoanNguoiDung>().Insert(newUser).Wait();

                return JsonSerializer.Serialize(new
                {
                    status = "success",
                    message = "ƒêƒÉng k√Ω th√†nh c√¥ng!"
                });
            }
            catch (Exception ex)
            {
                return JsonSerializer.Serialize(new
                {
                    status = "error",
                    message = "L·ªói Supabase: " + ex.Message
                });
            }
        }

        //X·ª≠ l√≠ nh·∫≠n t√≠n hi·ªáu t·ª´ form ƒëƒÉng nh·∫≠p
        private string HandleLogin(Dictionary<string, string> data)
        {
            string username = data["username"];
            string password = data["password"];

            try
            {
                //K·∫øt n·ªëidatatabase √† ki·ªÉm tra xem th√¥ng tin c√≥ tr√πng kh·ªõp kh√¥ng
                var client = SupabaseHelper.Client;
                var result = client.From<TaiKhoanNguoiDung>().Where(u => u.Email == username && u.Password == password).Get().Result; 

                if (result.Models.Count > 0)
                {
                    return JsonSerializer.Serialize(new
                    {
                        status = "success",
                        message = "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!"
                    });
                }
                else
                {
                    return JsonSerializer.Serialize(new
                    {
                        status = "error",
                        message = "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!"
                    });
                }
            }
            catch (Exception ex)
            {
                return JsonSerializer.Serialize(new
                {
                    status = "error",
                    message = "L·ªói Supabase: " + ex.Message
                });
            }
        }
    }
}

